package com.kara4k.mediagrub.model.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tasks".
*/
public class TaskDao extends AbstractDao<Task, Long> {

    public static final String TABLENAME = "tasks";

    /**
     * Properties of entity Task.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Service = new Property(1, String.class, "service", false, "SERVICE");
        public final static Property User = new Property(2, String.class, "user", false, "USER");
        public final static Property Album = new Property(3, String.class, "album", false, "ALBUM");
        public final static Property SubPath = new Property(4, String.class, "subPath", false, "SUB_PATH");
        public final static Property FirstFile = new Property(5, String.class, "firstFile", false, "FIRST_FILE");
        public final static Property Type = new Property(6, int.class, "type", false, "TYPE");
        public final static Property NotificationId = new Property(7, int.class, "notificationId", false, "NOTIFICATION_ID");
        public final static Property Count = new Property(8, int.class, "count", false, "COUNT");
        public final static Property Total = new Property(9, int.class, "total", false, "TOTAL");
        public final static Property IsRunning = new Property(10, boolean.class, "isRunning", false, "IS_RUNNING");
        public final static Property IsCompleted = new Property(11, boolean.class, "isCompleted", false, "IS_COMPLETED");
    }

    private DaoSession daoSession;


    public TaskDao(DaoConfig config) {
        super(config);
    }
    
    public TaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tasks\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SERVICE\" TEXT," + // 1: service
                "\"USER\" TEXT," + // 2: user
                "\"ALBUM\" TEXT," + // 3: album
                "\"SUB_PATH\" TEXT," + // 4: subPath
                "\"FIRST_FILE\" TEXT," + // 5: firstFile
                "\"TYPE\" INTEGER NOT NULL ," + // 6: type
                "\"NOTIFICATION_ID\" INTEGER NOT NULL ," + // 7: notificationId
                "\"COUNT\" INTEGER NOT NULL ," + // 8: count
                "\"TOTAL\" INTEGER NOT NULL ," + // 9: total
                "\"IS_RUNNING\" INTEGER NOT NULL ," + // 10: isRunning
                "\"IS_COMPLETED\" INTEGER NOT NULL );"); // 11: isCompleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tasks\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String service = entity.getService();
        if (service != null) {
            stmt.bindString(2, service);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(3, user);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(4, album);
        }
 
        String subPath = entity.getSubPath();
        if (subPath != null) {
            stmt.bindString(5, subPath);
        }
 
        String firstFile = entity.getFirstFile();
        if (firstFile != null) {
            stmt.bindString(6, firstFile);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getNotificationId());
        stmt.bindLong(9, entity.getCount());
        stmt.bindLong(10, entity.getTotal());
        stmt.bindLong(11, entity.getIsRunning() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsCompleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Task entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String service = entity.getService();
        if (service != null) {
            stmt.bindString(2, service);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(3, user);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(4, album);
        }
 
        String subPath = entity.getSubPath();
        if (subPath != null) {
            stmt.bindString(5, subPath);
        }
 
        String firstFile = entity.getFirstFile();
        if (firstFile != null) {
            stmt.bindString(6, firstFile);
        }
        stmt.bindLong(7, entity.getType());
        stmt.bindLong(8, entity.getNotificationId());
        stmt.bindLong(9, entity.getCount());
        stmt.bindLong(10, entity.getTotal());
        stmt.bindLong(11, entity.getIsRunning() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsCompleted() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(Task entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Task readEntity(Cursor cursor, int offset) {
        Task entity = new Task( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // service
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // album
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // subPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firstFile
            cursor.getInt(offset + 6), // type
            cursor.getInt(offset + 7), // notificationId
            cursor.getInt(offset + 8), // count
            cursor.getInt(offset + 9), // total
            cursor.getShort(offset + 10) != 0, // isRunning
            cursor.getShort(offset + 11) != 0 // isCompleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Task entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setService(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSubPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstFile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.getInt(offset + 6));
        entity.setNotificationId(cursor.getInt(offset + 7));
        entity.setCount(cursor.getInt(offset + 8));
        entity.setTotal(cursor.getInt(offset + 9));
        entity.setIsRunning(cursor.getShort(offset + 10) != 0);
        entity.setIsCompleted(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Task entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Task entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Task entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

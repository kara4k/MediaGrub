package com.kara4k.mediagrub.model.database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "downloads".
*/
public class MediaItemDao extends AbstractDao<MediaItem, Long> {

    public static final String TABLENAME = "downloads";

    /**
     * Properties of entity MediaItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DbId = new Property(0, Long.class, "dbId", true, "_id");
        public final static Property MTaskId = new Property(1, Long.class, "mTaskId", false, "M_TASK_ID");
        public final static Property MId = new Property(2, String.class, "mId", false, "M_ID");
        public final static Property AlbumId = new Property(3, String.class, "albumId", false, "ALBUM_ID");
        public final static Property OwnerId = new Property(4, String.class, "ownerId", false, "OWNER_ID");
        public final static Property MTitle = new Property(5, String.class, "mTitle", false, "M_TITLE");
        public final static Property MDescription = new Property(6, String.class, "mDescription", false, "M_DESCRIPTION");
        public final static Property MAddition = new Property(7, String.class, "mAddition", false, "M_ADDITION");
        public final static Property MThumbUrl = new Property(8, String.class, "mThumbUrl", false, "M_THUMB_URL");
        public final static Property MSourceUrl = new Property(9, String.class, "mSourceUrl", false, "M_SOURCE_URL");
        public final static Property MType = new Property(10, int.class, "mType", false, "M_TYPE");
    }

    private Query<MediaItem> task_MediaItemsQuery;

    public MediaItemDao(DaoConfig config) {
        super(config);
    }
    
    public MediaItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"downloads\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: dbId
                "\"M_TASK_ID\" INTEGER," + // 1: mTaskId
                "\"M_ID\" TEXT," + // 2: mId
                "\"ALBUM_ID\" TEXT," + // 3: albumId
                "\"OWNER_ID\" TEXT," + // 4: ownerId
                "\"M_TITLE\" TEXT," + // 5: mTitle
                "\"M_DESCRIPTION\" TEXT," + // 6: mDescription
                "\"M_ADDITION\" TEXT," + // 7: mAddition
                "\"M_THUMB_URL\" TEXT," + // 8: mThumbUrl
                "\"M_SOURCE_URL\" TEXT," + // 9: mSourceUrl
                "\"M_TYPE\" INTEGER NOT NULL );"); // 10: mType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"downloads\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MediaItem entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        Long mTaskId = entity.getMTaskId();
        if (mTaskId != null) {
            stmt.bindLong(2, mTaskId);
        }
 
        String mId = entity.getMId();
        if (mId != null) {
            stmt.bindString(3, mId);
        }
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(4, albumId);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(5, ownerId);
        }
 
        String mTitle = entity.getMTitle();
        if (mTitle != null) {
            stmt.bindString(6, mTitle);
        }
 
        String mDescription = entity.getMDescription();
        if (mDescription != null) {
            stmt.bindString(7, mDescription);
        }
 
        String mAddition = entity.getMAddition();
        if (mAddition != null) {
            stmt.bindString(8, mAddition);
        }
 
        String mThumbUrl = entity.getMThumbUrl();
        if (mThumbUrl != null) {
            stmt.bindString(9, mThumbUrl);
        }
 
        String mSourceUrl = entity.getMSourceUrl();
        if (mSourceUrl != null) {
            stmt.bindString(10, mSourceUrl);
        }
        stmt.bindLong(11, entity.getMType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MediaItem entity) {
        stmt.clearBindings();
 
        Long dbId = entity.getDbId();
        if (dbId != null) {
            stmt.bindLong(1, dbId);
        }
 
        Long mTaskId = entity.getMTaskId();
        if (mTaskId != null) {
            stmt.bindLong(2, mTaskId);
        }
 
        String mId = entity.getMId();
        if (mId != null) {
            stmt.bindString(3, mId);
        }
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(4, albumId);
        }
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(5, ownerId);
        }
 
        String mTitle = entity.getMTitle();
        if (mTitle != null) {
            stmt.bindString(6, mTitle);
        }
 
        String mDescription = entity.getMDescription();
        if (mDescription != null) {
            stmt.bindString(7, mDescription);
        }
 
        String mAddition = entity.getMAddition();
        if (mAddition != null) {
            stmt.bindString(8, mAddition);
        }
 
        String mThumbUrl = entity.getMThumbUrl();
        if (mThumbUrl != null) {
            stmt.bindString(9, mThumbUrl);
        }
 
        String mSourceUrl = entity.getMSourceUrl();
        if (mSourceUrl != null) {
            stmt.bindString(10, mSourceUrl);
        }
        stmt.bindLong(11, entity.getMType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MediaItem readEntity(Cursor cursor, int offset) {
        MediaItem entity = new MediaItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // dbId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // mTaskId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // albumId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ownerId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mTitle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mDescription
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mAddition
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mThumbUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mSourceUrl
            cursor.getInt(offset + 10) // mType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MediaItem entity, int offset) {
        entity.setDbId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMTaskId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbumId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOwnerId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMAddition(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMThumbUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMSourceUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMType(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MediaItem entity, long rowId) {
        entity.setDbId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MediaItem entity) {
        if(entity != null) {
            return entity.getDbId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MediaItem entity) {
        return entity.getDbId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "mediaItems" to-many relationship of Task. */
    public List<MediaItem> _queryTask_MediaItems(Long mTaskId) {
        synchronized (this) {
            if (task_MediaItemsQuery == null) {
                QueryBuilder<MediaItem> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MTaskId.eq(null));
                task_MediaItemsQuery = queryBuilder.build();
            }
        }
        Query<MediaItem> query = task_MediaItemsQuery.forCurrentThread();
        query.setParameter(0, mTaskId);
        return query.list();
    }

}
